apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: hopps
spec:
  chart:
    spec:
      chart: hopps
      sourceRef:
        kind: HelmRepository
        name: hopps
      version: 0.1.4
  interval: 1m0s
  values:
    # az-document-ai
    azDocumentAi:
      image:
        tag: "615"
      envFrom:
        - secretRef:
            name: az-document-ai
    # org
    org:
      image:
        tag: "615"
      envFrom:
        - secretRef:
            name: org
      envVars:
        # OpenFGA
        # ToDo: automatically set store name, when integrated openfga enabled
        - name: QUARKUS_OPENFGA_STORE
          value: hopps
        # Database secrets
        - name: quarkus.datasource.jdbc.url
          value: jdbc:postgresql://postgres-cluster-rw:5432/org?loggerLevel=OFF&sslmode=require
        - name: quarkus.datasource.username
          valueFrom:
            secretKeyRef:
              name: org-db-secret
              key: username
        - name: quarkus.datasource.password
          valueFrom:
            secretKeyRef:
              name: org-db-secret
              key: password
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-origin: "https://${DOMAIN_2}, http://localhost:5173"
          nginx.ingress.kubernetes.io/rewrite-target: /$2
        ingressClassName: nginx
        hosts:
          - host: api.${DOMAIN_2}
            paths:
              - path: /org(/|$)(.*)
                pathType: ImplementationSpecific
        tls:
          - secretName: api-tls
            hosts:
              - api.${DOMAIN_2}
    # disable subchart for postgresql
    postgresql-org:
      enabled: false
    # fin
    fin:
      image:
        tag: "615"
      envFrom:
        - secretRef:
            name: fin
      envVars:
        # OpenFGA
        # ToDo: automatically set store name, when integrated openfga enabled
        - name: QUARKUS_OPENFGA_STORE
          value: hopps
        # Database secrets
        - name: quarkus.datasource.jdbc.url
          value: jdbc:postgresql://postgres-cluster-rw:5432/fin?loggerLevel=OFF&sslmode=require
        - name: quarkus.datasource.username
          valueFrom:
            secretKeyRef:
              name: fin-db-secret
              key: username
        - name: quarkus.datasource.password
          valueFrom:
            secretKeyRef:
              name: fin-db-secret
              key: password
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-origin: "https://${DOMAIN_2}, http://localhost:5173"
          nginx.ingress.kubernetes.io/rewrite-target: /$2
        ingressClassName: nginx
        hosts:
          - host: api.${DOMAIN_2}
            paths:
              - path: /fin(/|$)(.*)
                pathType: ImplementationSpecific
        tls:
          - secretName: api-tls
            hosts:
              - api.${DOMAIN_2}
    postgresql-fin:
      enabled: false
    # finNarrator
    finNarrator:
      image:
        tag: 614
      envVars:
        - name: quarkus.langchain4j.openai.api-key
          valueFrom:
            secretKeyRef:
              name: openai-api-key
              key: apikey
    # frontend
    frontend:
      image:
        tag: "368"
      envFrom:
        - secretRef:
            name: frontend
      podSecurityContext:
        fsGroup: 1000
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
        ingressClassName: nginx
        hosts:
          - host: ${DOMAIN_2}
            paths:
              - path: /
                pathType: Prefix
        tls:
          - secretName: frontend-tls
            hosts:
              - ${DOMAIN_2}
    zugferd:
      image:
        tag: "615"
    kafka:
      enabled: true
      controller:
        replicaCount: 1
        resourcesPreset: "none"
      volumePermissions:
        resourcesPreset: "none"
      # disable authentication for kafka for now
      listeners:
        client:
          protocol: PLAINTEXT
    kafka-ui:
      enabled: true
      yamlApplicationConfig:
        kafka:
          clusters:
            - name: yaml
              # ToDo: url should automatically be calculated, dependent on the name of the release-name
              bootstrapServers: hopps-kafka:9092
        auth:
          type: disabled
        management:
          health:
            ldap:
              enabled: false
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          # basic auth
          nginx.ingress.kubernetes.io/auth-type: basic
          nginx.ingress.kubernetes.io/auth-secret: kafka-ui-auth
          nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Kafka'
          # configure oauth2-proxy security ToDo: waiting for keycloak GitHub integration for SSO
          #nginx.ingress.kubernetes.io/auth-response-headers: x-auth-request-user, x-auth-request-email
          #nginx.ingress.kubernetes.io/auth-signin: https://${OAUTH_PROXY_DOMAIN}/oauth2/start?rd=$scheme://$host$request_uri
          #nginx.ingress.kubernetes.io/auth-url: https://${OAUTH_PROXY_DOMAIN}/oauth2/auth
        tls:
          enabled: true
          secretName: kafka-tls
        host: kafka-ui.${DOMAIN_2}
    # use already available keycloak
    keycloak:
      http:
        # For backwards compatibility reasons we set this to the value used by previous Keycloak versions.
        relativePath: "/"
      tag: 18-keycloak-26.2.1
      enabled: true
      database:
        vendor: postgres
        hostname: postgres-cluster-rw
        port: 5432
        database: keycloak
        username: keycloak
        existingSecret: keycloak-db-secret
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-origin: "http://localhost:5173"
          # disable public access to metrics endpoint
          nginx.ingress.kubernetes.io/server-snippet: |
            location ~* /auth/realms/[^/]+/metrics {
                return 403;
            }
        rules:
          - host: id.${DOMAIN_2}
            paths:
              - path: '{{ tpl .Values.http.relativePath $ | trimSuffix "/" }}/'
                pathType: Prefix
        tls:
          - secretName: keycloak-tls
            hosts:
              - id.${DOMAIN_2}
        ingressClassName: nginx
      serviceMonitor:
        enabled: true
